
imports { 
    kernelSide {
		#include <linux/vmalloc.h>
    }
    applicationSide {
		import android.R;
		import android.app.Notification;
		import android.app.NotificationManager;
		import android.app.PendingIntent;
		import android.app.Activity;
		import android.content.Intent;
		import android.content.Context;    
		import java.util.Calendar;
		import java.util.GregorianCalendar;
    }
}

global {
	timers{	
		applicationSide{
			cameraTimer;
			gameTimer;
		}
	}
	
	states{
		applicationSide{
			int okToSendMessage = {
				declaration{public static final int okToSendMessage = 1;}
			}
			
			int phoneCallLimit = {
				declaration{public static final int phoneCallLimit = 7200000;}
			}
		
			boolean bluetoothEnabled = {
				declaration{public static boolean bluetoothEnabled = false;}
			}
			
			boolean wifiEnabled = {
				declaration{public static boolean wifiEnabled = false;}
			}
			
			boolean gpsEnabled = {
				declaration{public static boolean gpsEnabled = false;}
			}
			
			String appName = {
				declaration{public static String appName = "";}
			}
		
		}
		
		kernelSide {
			int dayNumber = {
				declaration{int dayNumber = 0;}
			}
		
			int hoursSpentOnCalls = {
				declaration{int hoursSpentOnCalls = 0;}
			}
		
			int messageCount = {
				declaration{int messageCount = 5;}
			}
			
			int messageTime = {
				declaration{int messageTime = 60000;}
			}
			
			struct message_node msg_node = {
				declaration{
					struct message_node{
						long time;
						struct message_node *node;
					}struct_message_node;
				}
			}
			
			struct message_node msg_det = {
				declaration{
					struct message_details{
						int message_count;
						struct message_node *head;
					}struct_message;
					struct message_details * msg_det = NULL;
				}
			}
					
			long total_gameplay ={
				declaration{
					long total_gameplay = 0;
				}
			}
			
			long total_allowed_gameplay ={
				declaration{
					long total_allowed_gameplay = 900000;
				}
			}
			
			long gamestart_time ={
				declaration{
					long gamestart_time = 0;
				}
			}
			
		}
	}
	
	events{	
		
		cameraTimerEvent() = {
			cameraTimer @ 60000
		}
				
		onURLRequest() = {
			WebView *.loadURL(String url,*)
		}
		
		onUrlRequest2() = {
			WebView *.loadDataWithBaseURL(String baseUrl,*)
		}
			
		onAppStart(String appName) = {
			Activity *.onStart()
		}where{
			//Geting context of application running
			Context c = getApplication().getApplicationContext();
			// Getting name of application running..
			appName = c.getString(c.getApplicationInfo().labelRes);
		}
		
		onSendMessageRequestBefore(String recipientNumber, long timeOfRequest) = {
			SmsManager *.sendTextMessage(String destinationAddress,*)
		} where{
			recipientNumber = destinationAddress;
			timeOfRequest = System.currentTimeMillis();
		}
		
		onSendMessageRequestAfter(long timeOfMsg) = {
			after SmsManager *.sendTextMessage(String destinationAddress,*)
		} where{
			timeOfMsg = timeOfRequest;
		}
		
		onDial(int day) = {
			GsmCallTracker *.dial(String dialString, *)
		} where {
			Calendar now = GregorianCalendar.getInstance();
			day = now.get(Calendar.DAY_OF_MONTH);
		}
		
		onHangup(long callDuration, int day) = {
			GsmCallTracker *.hangup(GsmConnection conn)
		} where{
			callDuration = conn.getDurationMillis();
			Calendar now = GregorianCalendar.getInstance();
			day = now.get(Calendar.DAY_OF_MONTH);
		}
		
		onDisconnect(long callDuration, int day) = {
			GsmCall *.connectionDisconnected(GsmConnection conn)
		} where{
			callDuration = conn.getDurationMillis();
			Calendar now = GregorianCalendar.getInstance();
			day = now.get(Calendar.DAY_OF_MONTH);
		}
		
		onGetLongitude() = {
			 before Location *.getLongitude()
		}
		
		onGetLatitude() = {
			 before Location *.getLatitude()
		}
		
		onFile() = {
			File *.File(String path)
		}
		
		onSocketRequest() = {
			Socket *.Socket(String dstName, int dstPort, *)
		}
		
		onWifiEnable() = {
			WifiManager *.setWifiEnabled(boolean enabled)
		}
		onWifiEnabled(boolean setting) = {
			after WifiManager *.setWifiEnabled(boolean enabled)
		} uponReturning(setting)
		
		onChangeTime() = {
			AlarmManager *.setTime(long millis)
		}
		
		onChangeTimeZone() = {
			AlarmManager *.setTimeZone(String timeZone)
		}
		
		gameTimerEvent(long currentGameTime) = {
			gameTimer @% 1000
		}where{
			currentGameTime = System.currentTimeMillis();
		}
				
		onGameStart(long gameTime, String gameName) = {
			Activity *.onStart()
		}where{
			//Geting context of application running
			Context cc = getApplication().getApplicationContext();
			// Getting name of application running..
			gameName = cc.getString(cc.getApplicationInfo().labelRes);
			gameTime = System.currentTimeMillis();
		}
				
		onGameResume(long gameTime, String gameName) = {
			Activity *.onResume()
		}where{
			//Geting context of application running
			Context c = getApplication().getApplicationContext();
			// Getting name of application running..
			gameName = c.getString(c.getApplicationInfo().labelRes);
			gameTime = System.currentTimeMillis();
		}
		
		onGameStop(String gameName) = {
			Activity *.onStop()
		}where{
			//Geting context of application running
			Context c = getApplication().getApplicationContext();
			// Getting name of application running..
			gameName = c.getString(c.getApplicationInfo().labelRes);
		}
		
		onGamePause(String gameName) = {
			Activity *.onPause()
		}where{
			//Geting context of application running
			Context c = getApplication().getApplicationContext();
			// Getting name of application running..
			gameName = c.getString(c.getApplicationInfo().labelRes);
		}
		
		onGameStopPause(String gameNamee)= {
			onGamePause(gameNamee) | onGameStop(gameNamee)
		}
	}
	
	conditions { 
		urlRequestNotGranted = { applicationSide{url.contains("timesofmalta")}} 
		urlRequestNotGranted2 = { applicationSide{baseUrl.contains("timesofmalta")}} 
		appPermissionDenied = {	applicationSide{appName.equals("Calculator")}}
		
		notOkToSendMessage = {kernelSide{} && applicationSide{sm != RVStates.okToSendMessage}}		
		okToSendMessage = { applicationSide{sm == RVStates.okToSendMessage}}
		
		phoneCallId = { kernelSide{} && applicationSide{sm > RVStates.phoneCallLimit || dialString.equals("79913928")}}
	
		fileOpenRequestHasName = {applicationSide{path.contains("/storage/sdcard0/alohaltd")}}
		
		socketIsBlackListed = {applicationSide{dstName.contains("98.138.253.109")|| dstName.contains("98.139.183.24") || dstName.contains("206.190.36.45") || dstName.contains("yahoo")}}
	
		enableRequest = {applicationSide{enabled == true}}
		
		wifiEnabled = {applicationSide{setting = true}}
		
		isCameraApp = {applicationSide{appName.equals("Gallery")}}
		
		isAGame = {applicationSide{gameName.equals("Angry Birds") || gameName.equals("2048 Puzzle") ||gameName.equals("Logo Quiz Ultimate")}}
		notOkToRun = {kernelSide{} && applicationSide{sm == 5}}
	}
	
	actions{
		blockRequest = { applicationSide {return;}}
		
		blockApplicationFromStarting = { 
			applicationSide{			
				final int NOTIF_ID = 1234;
	 			NotificationManager notifManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
				Notification note = new Notification(R.drawable.ic_dialog_alert, "Permission Denied", System.currentTimeMillis());
				PendingIntent intent = PendingIntent.getActivity(this, 0, new Intent(c, Activity.class), 0);		 
				note.setLatestEventInfo(this, "Permission Denied", "Application is blacklisted", intent);		 
				notifManager.notify(NOTIF_ID, note);
				finish();	
			}
		
		}
				
		checkIfMessageCanBeSent = {	
			kernelSide{	
				if(msg_det != NULL){
					while(msg_det->head != NULL && msg_det->head->time < timeOfRequest-messageTime){
						if(msg_det->head != NULL){
							struct message_node *curr = msg_det->head;
							msg_det->head = msg_det->head->node;
							vfree(curr);
							msg_det->message_count--;	
						}
					}
					if(msg_det->message_count < messageCount){
						return 1;
					}else{
						return 0;
					}
				}
				return 1;
			} >> applicationSide{
					throw new IllegalArgumentException("Property violation..");
			}	
		}
		
		messageSent = { 
			kernelSide {
				// if message details is not yet initialized....
				if(msg_det == NULL){
					msg_det = (struct message_details*)vmalloc(sizeof(struct message_details));//,GFP_KERNEL
					msg_det->message_count = 0;
					msg_det->head = NULL;
				}
				// if there are no messages recorded yet
				if(msg_det->head == NULL){
					msg_det->head = (struct message_node*)vmalloc(sizeof(struct message_node));
					msg_det->head ->time = timeOfMsg;
					msg_det->head ->node = NULL;
				}else{// if there are some messages in list...
								struct message_node *curr = msg_det->head;
					struct message_node *prev;
			
					while(curr != NULL){// get to last message
							prev = curr;
							curr = curr-> node;
					}
					curr  = (struct message_node*)vmalloc(sizeof(struct message_node));
					curr ->time = timeOfMsg;
					curr ->node = NULL;
					prev ->node = curr;		
				}
				msg_det->message_count++;			
			}
		}
		
		denyPhoneCall = {
			kernelSide {
				if(dayNumber != day){
					dayNumber = day;
					hoursSpentOnCalls = 0;
				}
				return hoursSpentOnCalls;			
			} 
			>> applicationSide {
				Context c =  mPhone.getContext();
				
				final int NOTIF_ID = 1235;
		 		NotificationManager notifManager = (NotificationManager) c.getSystemService(Context.NOTIFICATION_SERVICE);
				Notification note = new Notification(R.drawable.ic_dialog_alert, "PhoneCall Denied", System.currentTimeMillis());
				PendingIntent intent = PendingIntent.getActivity(c, 0, new Intent(c, Activity.class), 0);		 
				note.setLatestEventInfo(c, "PhoneCall Denied","Num: "+dialString+" BlackListed" , intent);		 
				notifManager.notify(NOTIF_ID, note);
				return null;
			}
		}
		
		addPhoneCallDuration = {
			kernelSide {
				if(dayNumber != day){
					dayNumber = day;
					hoursSpentOnCalls = 0;
				}
				hoursSpentOnCalls += callDuration;
			}
		}
		
		setLatitude = {
			applicationSide{
				return 55.20;
			}
		}
		
		setLongitude = {
			applicationSide{
				return 162.72;
			}
		}
		
		blockOpenFileRequest = {
			applicationSide{
				throw new NullPointerException("File Access Restricted!");
			}
		}
		
		blockSocketRequest = {
			applicationSide{
				throw new NullPointerException("IP Address BlackListed!");
			}
		}
		
		blockWifiRequest = {
			applicationSide{			
				Calendar c = Calendar.getInstance();
				int hour,min;
				String AM_PM;
		        hour = c.get(Calendar.HOUR_OF_DAY);
		        min = c.get(Calendar.MINUTE);
		        int ds = c.get(Calendar.AM_PM);
		        if(ds==0)
		        AM_PM="am";
		        else
		        AM_PM="pm";
		        
		        if(hour > 1 && AM_PM.equals("pm")){
					setWifiEnabledRV(false);
					disconnect();
					return true;
		        }
			}
		}
		
		setWifiEnabled = {
			applicationSide{
				RVStates.wifiEnabled = true;
			}
		}
		
		blockTimeChangeRequest = {
			applicationSide{
				return;
			}
		}
		
		assignName = {applicationSide{RVStates.appName = appName;}}
		startCameraTimer = {RV:timerReset(cameraTimer)}
		startCameraTimer2 = {RV:timerResume(cameraTimer)}
		
		exitApplication = {
			applicationSide{
				System.exit(0);
			}
		}
				
		startGameTimer = {
			kernelSide{
				if(total_gameplay > total_allowed_gameplay){
					return 5;
				}else{
					gamestart_time = gameTime;
				}
			} >> applicationSide{
				if(sm == 5){
					System.exit(0);
				}else{
					RVTimers.resetTimer("gameTimer");
					RVTimers.resumeTimer("gameTimer");
				}
			}
		}
		
		checkIfGameOkToRun = {
			kernelSide{
				if((total_gameplay+(currentGameTime-gamestart_time)) >= total_allowed_gameplay){
					return 5;
				}else{
					total_gameplay = total_gameplay+(currentGameTime-gamestart_time);
				}
			} >> applicationSide{
				System.exit(0);
			}
		}
		
		stopGameTimer = {
				RV:timerPause(gameTimer)
		}
	}
	
	rules{
		browserBlockURL = onURLRequest() \ urlRequestNotGranted -> {blockRequest}
		browserBlockURL2 = onUrlRequest2() \ urlRequestNotGranted2 -> {blockRequest}
		
		appBlockApp = onAppStart(String appName) \ appPermissionDenied -> {blockApplicationFromStarting}
				
		messageSendingBefore = onSendMessageRequestBefore(String recipientNumber, long timeOfRequest) \ notOkToSendMessage -> {checkIfMessageCanBeSent}
		messageSendingAfter = onSendMessageRequestAfter(long timeOfMsg) \okToSendMessage -> {messageSent}
		
		//2 Properties
		blockPhoneCall =  onDial(int day)\phoneCallId -> {denyPhoneCall}
		callEnded = onHangup(long callDuration, int day) -> {addPhoneCallDuration}
		callEnded2 = onDisconnect(long callDuration, int day) -> {addPhoneCallDuration}
		
		//Property
		blockLocation = onGetLatitude() -> {setLatitude}
		blockLocation2 = onGetLongitude() -> {setLongitude}
		
		// file access
		blockFileAccess = onFile() \fileOpenRequestHasName -> {blockOpenFileRequest}
		
		//Socket access
		blockSocketAccess = onSocketRequest() \socketIsBlackListed -> {blockSocketRequest}
		
		blockWifiAfterHours = onWifiEnable() \ enableRequest -> {blockWifiRequest}
		setWifiEnabled = onWifiEnabled() \ wifiEnabled ->{setWifiEnabled}
		
		blockChangeTime = onChangeTime() -> {blockTimeChangeRequest}
		blockChangeTime2 = onChangeTimeZone() -> {blockTimeChangeRequest}
		
		appBlockApp = onAppStart(String appName) \ isCameraApp -> {startCameraTimer startCameraTimer2}
		timerTest = cameraTimerEvent() -> {exitApplication}
		
		gameLimitation = onGameStart(long gameTime, String gameName)  \ isAGame -> {startGameTimer}
		gameLimitation2 = onGameResume(long gameTime, String gameName)  \ isAGame -> {startGameTimer}		
		gameCheckIfOkToRun = gameTimerEvent(long currentGameTime) \notOkToRun  -> {checkIfGameOkToRun}		
		gameStopTimer = onGameStopPause(String gameName) \ isAGame -> {stopGameTimer}
	}
}
