/* Generated By:JJTree&JavaCC: Do not edit this line. Tool.java */
package parser;
import java.io.FileInputStream;
import java.util.ArrayList;
import codeGeneration.CodeGenerationMain;
import states.*;

public class Tool/*@bgen(jjtree)*/implements ToolTreeConstants, ToolConstants {/*@bgen(jjtree)*/
  protected JJTToolState jjtree = new JJTToolState();
          public static void main( String[] args ){
                try{
                                System.out.println("Parsing Properties...");
                        System.setIn(new FileInputStream(args[0]));
                        Tool parser = new Tool( System.in );
                        Program n = parser.Program();
                        System.out.println("Parsing complete...");
                        System.out.println("Starting Code Generation..");
                        CodeGenerationMain code = new CodeGenerationMain();
                        code.generateKernelSideCode(n,Integer.parseInt(args[1]));
                        code.generateApplicationSideCode(n,Integer.parseInt(args[1]));
                        code.generateTimerFrameworkCode(n);
                        System.out.println("Code Generation finished successfully..");
                }catch(Exception e){
                        System.out.println("Problema: "+e);
                }
        }

//****************************************FIN************************************************************

//****************************************BLOCK READING**************************************************
  final public String Blck() throws ParseException {
               /*@bgen(jjtree) Blck */
        SimpleNode jjtn000 = new SimpleNode(JJTBLCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String temp;
        String text= "";
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOBR:
        case BLK:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLK:
          t = jj_consume_token(BLK);
                    text += t.toString();
          break;
        case BOBR:
          t = jj_consume_token(BOBR);
                                    text += t.toString();
          temp = Blck();
                                               text += temp;
          t = jj_consume_token(BCBR);
                                    text += t.toString();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return text;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Block() throws ParseException {
                /*@bgen(jjtree) Block */
        SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String allText;
    try {
      jj_consume_token(OBR);
      allText = Blck();
      jj_consume_token(BCBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return allText;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//***********************************************END*****************************************************

//***********************************************Imports Section*****************************************
  final public String ImportsKernelIncludes() throws ParseException {
 /*@bgen(jjtree) ImportsKernelIncludes */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPORTSKERNELINCLUDES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String imprt = "";
    try {
      jj_consume_token(INCLUDE);
      jj_consume_token(BNDS);
      t = jj_consume_token(STRING);
                               imprt += "include <"+t.toString();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLSH:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(SLSH);
        t = jj_consume_token(STRING);
                                             imprt += "/"+t.toString();
      }
      jj_consume_token(HEADER);
      jj_consume_token(BNDE);
                                                imprt += ".h> \u005cn";
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return imprt;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String ImportsAppllicationImports() throws ParseException {
 /*@bgen(jjtree) ImportsAppllicationImports */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPORTSAPPLLICATIONIMPORTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String imprt = "";
    try {
      jj_consume_token(IMPORT);
                 imprt += "import ";
      t = jj_consume_token(STRING);
                              imprt += t.toString();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FSTP:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(FSTP);
        t = jj_consume_token(STRING);
                                             imprt+= "."+t.toString();
      }
      jj_consume_token(SCOL);
                                       imprt+="; \u005cn";
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return imprt;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ImportsKernelSide(Imports imp) throws ParseException {
 /*@bgen(jjtree) ImportsKernelSide */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPORTSKERNELSIDE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String imports = "";
    try {
      jj_consume_token(KERNEL);
      jj_consume_token(OBR);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCLUDE:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        imports = ImportsKernelIncludes();
                                                   imp.addKernelImport(imports);
      }
      jj_consume_token(CBR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ImportsApplicationSide(Imports imp) throws ParseException {
 /*@bgen(jjtree) ImportsApplicationSide */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPORTSAPPLICATIONSIDE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String imports = "";
    try {
      jj_consume_token(APP);
      jj_consume_token(OBR);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        imports = ImportsAppllicationImports();
                         imp.addApplicationImport(imports);
      }
      jj_consume_token(CBR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Imports ImportsMain() throws ParseException {
                       /*@bgen(jjtree) ImportsMain */
        SimpleNode jjtn000 = new SimpleNode(JJTIMPORTSMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Imports imp;
    try {
         imp = new Imports();
      jj_consume_token(IMPORTS);
      jj_consume_token(OBR);
      ImportsKernelSide(imp);
      ImportsApplicationSide(imp);
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return imp;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//Timers SECTION
  final public String Timers() throws ParseException {
                 /*@bgen(jjtree) Timers */
        SimpleNode jjtn000 = new SimpleNode(JJTTIMERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String timerName;
    try {
      t = jj_consume_token(STRING);
                       timerName = t.toString();
      jj_consume_token(SCOL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return timerName;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Timers TimersMain() throws ParseException {
                     /*@bgen(jjtree) TimersMain */
        SimpleNode jjtn000 = new SimpleNode(JJTTIMERSMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String timerName;
        Timers timers;
    try {
         timers = new Timers();
      jj_consume_token(TIMERS);
      jj_consume_token(OBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APP:
        jj_consume_token(APP);
        jj_consume_token(OBR);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_6;
          }
          timerName = Timers();
                                                   timers.addTimerNameApp(timerName);
        }
        jj_consume_token(CBR);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KERNEL:
        jj_consume_token(KERNEL);
                          {if (true) throw new Exception("Warning: KernelSide timers are not yet implemented and will be ignored...");}
        jj_consume_token(OBR);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          timerName = Timers();
                                                                                                                                                         timers.addTimerNameKernel(timerName);
        }
        jj_consume_token(CBR);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return timers;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//***********************************************END*****************************************************

//***********************************************States SECTION******************************************
  final public State States() throws ParseException {
                /*@bgen(jjtree) States */
        SimpleNode jjtn000 = new SimpleNode(JJTSTATES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String temp;
        Token t;
        State state;
    try {
         state = new State();
      temp = Type();
                      state.setStateType(temp);
      t = jj_consume_token(STRING);
                                                              state.setStateName(t.toString());
      jj_consume_token(EQ);
      jj_consume_token(OBR);
      jj_consume_token(STATEDEC);
      temp = Block();
                                               state.setStateDeclaration(temp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATESAVE:
        jj_consume_token(STATESAVE);
        temp = Block();
                                            state.setStateSave(temp);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATELOAD:
        jj_consume_token(STATELOAD);
        temp = Block();
                                            state.setStateLoad(temp);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return state;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public States StatesMain() throws ParseException {
                     /*@bgen(jjtree) StatesMain */
        SimpleNode jjtn000 = new SimpleNode(JJTSTATESMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);State state;
        States states;
    try {
         states = new States();
      jj_consume_token(STATES);
      jj_consume_token(OBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APP:
        jj_consume_token(APP);
        jj_consume_token(OBR);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRUCT:
          case STRING:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
          state = States();
                                               states.addApplicationSideState(state);
        }
        jj_consume_token(CBR);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KERNEL:
        jj_consume_token(KERNEL);
        jj_consume_token(OBR);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRUCT:
          case STRING:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_9;
          }
          state = States();
                                                  states.addKernelSideState(state);
        }
        jj_consume_token(CBR);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return states;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//***********************************************END*****************************************************

//***********************************************Events Section*****************************************************
  final public String EventName() throws ParseException {
                    /*@bgen(jjtree) EventName */
        SimpleNode jjtn000 = new SimpleNode(JJTEVENTNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String eventName;
    try {
      t = jj_consume_token(STRING);
                     eventName = t.toString();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return eventName;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String ClassName() throws ParseException {
                    /*@bgen(jjtree) ClassName */
        SimpleNode jjtn000 = new SimpleNode(JJTCLASSNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String className = "";
    try {
      t = jj_consume_token(STRING);
                     className = t.toString();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return className;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Type() throws ParseException {
               /*@bgen(jjtree) Type */
        SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String type= "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRUCT:
        jj_consume_token(STRUCT);
        t = jj_consume_token(STRING);
                                        type = "struct "+t.toString();
        break;
      case STRING:
        t = jj_consume_token(STRING);
                               type = t.toString();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return type;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Parameter Parameters() throws ParseException {
                        /*@bgen(jjtree) Parameters */
        SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String tt;
        Token t;
        Parameter parameter;
    try {
         parameter = new Parameter();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STR:
      case STRUCT:
      case STRING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
        case STRING:
          tt = Type();
                       parameter.addParameterType(tt);
          t = jj_consume_token(STRING);
                        parameter.addParameterName(t.toString());
          break;
        case STR:
          t = jj_consume_token(STR);
                     parameter.setStar();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRUCT:
          case STRING:
            tt = Type();
                        parameter.addParameterType(tt);
            t = jj_consume_token(STRING);
                         parameter.addParameterName(t.toString());
            break;
          case STR:
            t = jj_consume_token(STR);
                     parameter.setStar();
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return parameter;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String CallParameters() throws ParseException {
                         /*@bgen(jjtree) CallParameters */
        SimpleNode jjtn000 = new SimpleNode(JJTCALLPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String param = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                      param+= t.toString();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(STRING);
                                                                   param+=","+ t.toString();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return param;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String EventNameCall() throws ParseException {
                        /*@bgen(jjtree) EventNameCall */
        SimpleNode jjtn000 = new SimpleNode(JJTEVENTNAMECALL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String temp;
        String eventName;
    try {
      t = jj_consume_token(STRING);
                     eventName = t.toString();
      jj_consume_token(OPAR);
      temp = CallParameters();
      jj_consume_token(CPAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         eventName += "("+temp+")"; {if (true) return eventName;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String EventInstance() throws ParseException {
                        /*@bgen(jjtree) EventInstance */
        SimpleNode jjtn000 = new SimpleNode(JJTEVENTINSTANCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String eventInstance= "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STR:
        jj_consume_token(STR);
                  eventInstance += "*";
        break;
      case STRING:
        t = jj_consume_token(STRING);
                          eventInstance += t.toString();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return eventInstance;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void EventsOptional(Event event) throws ParseException {
                                  /*@bgen(jjtree) EventsOptional */
        SimpleNode jjtn000 = new SimpleNode(JJTEVENTSOPTIONAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String whereBlock;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        whereBlock = Block();
                                       event.setWhereCode(whereBlock);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPONRETURNING:
        jj_consume_token(UPONRETURNING);
        jj_consume_token(OPAR);
        t = jj_consume_token(STRING);
                                              event.setUponReturningCode(t.toString());
        jj_consume_token(CPAR);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Event EventCollection() throws ParseException {
                         /*@bgen(jjtree) EventCollection */
        SimpleNode jjtn000 = new SimpleNode(JJTEVENTCOLLECTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String temp;
        Parameter parameters;
        Event event;
        EventRepresentation eventRep;
    try {
         event = new Event();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVENTCAPTURE:
        t = jj_consume_token(EVENTCAPTURE);
                             event.setEventCapture(t.toString());
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
          eventRep = new EventRepresentation();
      if (jj_2_1(2)) {
        temp = ClassName();
                                                   eventRep.setClassName(temp);
        temp = EventInstance();
                                                       eventRep.setInstanceName(temp);
        jj_consume_token(FSTP);
        temp = EventName();
                                                   eventRep.setEventName(temp);
        jj_consume_token(OPAR);
        parameters = Parameters();
        jj_consume_token(CPAR);
                                 eventRep.addParameter(parameters);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          temp = EventNameCall();
                                                  eventRep.setEventName(temp);eventRep.isSpecialEvent = true;
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
         event.addEventRepresentation(eventRep);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_12;
        }
        jj_consume_token(OR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EVENTCAPTURE:
          t = jj_consume_token(EVENTCAPTURE);
                                     event.setEventCapture(t.toString());
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
                  eventRep = new EventRepresentation();
        if (jj_2_2(2)) {
          temp = ClassName();
                                                   eventRep.setClassName(temp);
          temp = EventInstance();
                                                       eventRep.setInstanceName(temp);
          jj_consume_token(FSTP);
          temp = EventName();
                                                   eventRep.setEventName(temp);
          jj_consume_token(OPAR);
          parameters = Parameters();
          jj_consume_token(CPAR);
                                 eventRep.addParameter(parameters);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            temp = EventNameCall();
                                                  eventRep.setEventName(temp);eventRep.isSpecialEvent = true;
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
                 event.setSpecialEvent(); event.addEventRepresentation(eventRep);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return event;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Event TimerEventDef(Timers timers) throws ParseException {
                                    /*@bgen(jjtree) TimerEventDef */
        SimpleNode jjtn000 = new SimpleNode(JJTTIMEREVENTDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String temp;
        int timerValue;
        Event event;
        EventRepresentation eventRep;
    try {
         eventRep = new EventRepresentation();
        event = new Event();
      temp = TimerName();
                            eventRep.setClassName(temp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        jj_consume_token(AT);
        timerValue = TimerValue();
                                          timers.addTimerValue(temp,timerValue); eventRep.setInstanceName("@"); eventRep.setEventName(Integer.toString(timerValue));
        break;
      case 66:
        jj_consume_token(66);
        timerValue = TimerValue();
                                                 timers.addTimerValue(temp,timerValue); eventRep.setInstanceName("@%"); eventRep.setEventName(Integer.toString(timerValue));
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         eventRep.isTimerEvent = true;
         event.addEventRepresentation(eventRep);
         {if (true) return event;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void EventDefined(Events events, Timers timers) throws ParseException {
                                                 /*@bgen(jjtree) EventDefined */
        SimpleNode jjtn000 = new SimpleNode(JJTEVENTDEFINED);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String eventName = "";
        Parameter parameters;
        Event event = null;
    try {
      eventName = EventName();
      jj_consume_token(OPAR);
      parameters = Parameters();
      jj_consume_token(CPAR);
      jj_consume_token(EQ);
      jj_consume_token(OBR);
      if (jj_2_3(2)) {
        event = EventCollection();
                        {event.setEventName(eventName);
                         event.setEventParameters(parameters);
                         events.addEvent(event);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          event = TimerEventDef(timers);
                        {event.setEventName(eventName);
                         event.setEventParameters(parameters); //awnekk
                         events.addEvent(event);}
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CBR);
      EventsOptional(event);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Events EventsMain(Timers timers) throws ParseException {
                                  /*@bgen(jjtree) EventsMain */
        SimpleNode jjtn000 = new SimpleNode(JJTEVENTSMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Events events;
    try {
         events = new Events();
      jj_consume_token(EVENTS);
      jj_consume_token(OBR);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_13;
        }
        EventDefined(events,timers);
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return events;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//***********************************************END*****************************************************

//***********************************************Conditions Section**************************************
  final public String ConditionName() throws ParseException {
                        /*@bgen(jjtree) ConditionName */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String conditionName;
    try {
      t = jj_consume_token(STRING);
                       conditionName = t.toString();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return conditionName;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String TimerName() throws ParseException {
                    /*@bgen(jjtree) TimerName */
        SimpleNode jjtn000 = new SimpleNode(JJTTIMERNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String timerName;
    try {
      t = jj_consume_token(STRING);
                      timerName = t.toString();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return timerName;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public int TimerValue() throws ParseException {
                  /*@bgen(jjtree) TimerValue */
        SimpleNode jjtn000 = new SimpleNode(JJTTIMERVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        int timerValue;
    try {
      t = jj_consume_token(INTEGER);
                     timerValue = Integer.parseInt(t.toString());
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return timerValue;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionNormal ConditionsDef() throws ParseException {
                                 /*@bgen(jjtree) ConditionsDef */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONSDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String text = "";
        ConditionNormal normalCondition = null;
    try {
         normalCondition = new ConditionNormal();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APP:
        jj_consume_token(APP);
        text = Block();
                                       normalCondition.setApplicationSideConditions(text);
        break;
      case KERNEL:
        jj_consume_token(KERNEL);
        text = Block();
                                          normalCondition.setKernelSideConditions(text);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANDAND:
          jj_consume_token(ANDAND);
          jj_consume_token(APP);
          text = Block();
                                                                                                                         normalCondition.setApplicationSideConditions(text);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        break;
      case OBR:
        text = Block();
                                 normalCondition.setKernelSideConditions(text);
        jj_consume_token(ANDAND);
        text = Block();
                                                                                                         normalCondition.setApplicationSideConditions(text);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return normalCondition;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionBasedOnTimers TimerConditions() throws ParseException {
                                          /*@bgen(jjtree) TimerConditions */
        SimpleNode jjtn000 = new SimpleNode(JJTTIMERCONDITIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ConditionBasedOnTimers timerCondition = null;
        String timerName;
        int timerValue;
    try {
         timerCondition = new ConditionBasedOnTimers();
      jj_consume_token(TIMEUNDER);
      jj_consume_token(OPAR);
      timerName = TimerName();
      jj_consume_token(COMMA);
      timerValue = TimerValue();
      jj_consume_token(CPAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                timerCondition.setTimerName(timerName);
                timerCondition.setConditionValue(timerValue);
                {if (true) return timerCondition;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ConditionsDefined(Conditions conditions) throws ParseException {
                                               /*@bgen(jjtree) ConditionsDefined */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONSDEFINED);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String conditionName;
        ConditionNormal normalCondition;
        ConditionBasedOnTimers timerCondition;
    try {
      conditionName = ConditionName();
      jj_consume_token(EQ);
      jj_consume_token(OBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMEUNDER:
        timerCondition = TimerConditions();
                                timerCondition.setConditionName(conditionName);
                                conditions.addConditionBasedOnTimers(timerCondition);
        break;
      case OBR:
      case KERNEL:
      case APP:
        normalCondition = ConditionsDef();
                                normalCondition.setConditionName(conditionName);
                                conditions.addNormalCondition(normalCondition);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CBR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Conditions ConditionsMain() throws ParseException {
                             /*@bgen(jjtree) ConditionsMain */
        SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONSMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Conditions conditions;
    try {
         conditions = new Conditions();
      jj_consume_token(CONDITIONS);
      jj_consume_token(OBR);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_14;
        }
        ConditionsDefined(conditions);
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         ToolTokenManager.actionsOrConditions = false; {if (true) return conditions;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//***********************************************END*****************************************************

//**********************************************Actions Section******************************************
  final public String ActionName() throws ParseException {
                     /*@bgen(jjtree) ActionName */
        SimpleNode jjtn000 = new SimpleNode(JJTACTIONNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String actionName;
    try {
      t = jj_consume_token(STRING);
                      actionName = t.toString();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return actionName;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Action ActionsDef() throws ParseException {
                     /*@bgen(jjtree) ActionsDef */
        SimpleNode jjtn000 = new SimpleNode(JJTACTIONSDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String actionBlock;
        Action normalAction = null;
    try {
         normalAction = new Action();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APP:
        jj_consume_token(APP);
        actionBlock = Block();
                                      normalAction.setApplicationSideAction(actionBlock);
        break;
      case KERNEL:
        jj_consume_token(KERNEL);
        actionBlock = Block();
                                         normalAction.setKernelSideAction(actionBlock);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BNDEBNDE:
          jj_consume_token(BNDEBNDE);
          jj_consume_token(APP);
          actionBlock = Block();
                                                                                                                                normalAction.setApplicationSideAction(actionBlock);
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        break;
      case OBR:
        actionBlock = Block();
                               normalAction.setKernelSideAction(actionBlock);
        jj_consume_token(BNDEBNDE);
        actionBlock = Block();
                                                                                                         normalAction.setApplicationSideAction(actionBlock);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return normalAction;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Action TimerActionDef() throws ParseException {
                         /*@bgen(jjtree) TimerActionDef */
        SimpleNode jjtn000 = new SimpleNode(JJTTIMERACTIONDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String name;
        String action;
        Action normalAction;
    try {
         normalAction = new Action();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMERPAUSE:
        t = jj_consume_token(TIMERPAUSE);
                            action = t.toString();
        jj_consume_token(OPAR);
        name = TimerName();
        jj_consume_token(CPAR);
        break;
      case TIMERESUME:
        t = jj_consume_token(TIMERESUME);
                           action = t.toString();
        jj_consume_token(OPAR);
        name = TimerName();
        jj_consume_token(CPAR);
        break;
      case TIMERESET:
        t = jj_consume_token(TIMERESET);
                          action = t.toString();
        jj_consume_token(OPAR);
        name = TimerName();
        jj_consume_token(CPAR);
        break;
      case TIMEROFF:
        t = jj_consume_token(TIMEROFF);
                         action = t.toString();
        jj_consume_token(OPAR);
        name = TimerName();
        jj_consume_token(CPAR);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         action+= "("+name+")";normalAction.setTimerAction(action);
        {if (true) return normalAction;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ActionsDefined(Actions actions) throws ParseException {
                                      /*@bgen(jjtree) ActionsDefined */
        SimpleNode jjtn000 = new SimpleNode(JJTACTIONSDEFINED);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String actionName;
        Action normalAction;
    try {
      actionName = ActionName();
      jj_consume_token(EQ);
      jj_consume_token(OBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBR:
      case KERNEL:
      case APP:
        normalAction = ActionsDef();
        break;
      case TIMEROFF:
      case TIMERPAUSE:
      case TIMERESUME:
      case TIMERESET:
        normalAction = TimerActionDef();
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         normalAction.setActionName(actionName);
        actions.addNormalAction(normalAction);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Actions ActionsMain() throws ParseException {
                       /*@bgen(jjtree) ActionsMain */
        SimpleNode jjtn000 = new SimpleNode(JJTACTIONSMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Actions actions;
    try {
         actions = new Actions();
      jj_consume_token(ACTIONS);
      jj_consume_token(OBR);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_15;
        }
        ActionsDefined(actions);
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         ToolTokenManager.actionsOrConditions = false;{if (true) return actions;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//***********************************************END*****************************************************

//***********************************************Rules Section*******************************************

//Rules SECTION
  final public ArrayList<String> RuleCondition() throws ParseException {
                                   /*@bgen(jjtree) RuleCondition */
        SimpleNode jjtn000 = new SimpleNode(JJTRULECONDITION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String condition;
        ArrayList<String> ruleConditions = new ArrayList<String>();
    try {
      jj_consume_token(FSLSH);
      condition = ConditionName();
                                            ruleConditions.add(condition);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANDAND:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_16;
        }
        jj_consume_token(ANDAND);
        condition = ConditionName();
                                                        ruleConditions.add(condition);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return ruleConditions;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Rule RulesDefined() throws ParseException {
                     /*@bgen(jjtree) RulesDefined */
        SimpleNode jjtn000 = new SimpleNode(JJTRULESDEFINED);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String ruleEvent;
        ArrayList<String> ruleCondition;
        String ruleAction = "";
        Rule rule;
    try {
         rule = new Rule();
      t = jj_consume_token(STRING);
                     rule.setRuleName(t.toString());
      jj_consume_token(EQ);
      ruleEvent = EventName();
                                                rule.setRuleEvent(ruleEvent);
      jj_consume_token(OPAR);
      Parameters();
      jj_consume_token(CPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FSLSH:
        ruleCondition = RuleCondition();
                                                         rule.setRuleCondition(ruleCondition);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(67);
      jj_consume_token(OBR);
      label_17:
      while (true) {
        ruleAction = ActionName();
                                           rule.addRuleAction(ruleAction);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_17;
        }
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return rule;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Rules RulesMain() throws ParseException {
                   /*@bgen(jjtree) RulesMain */
        SimpleNode jjtn000 = new SimpleNode(JJTRULESMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Rules rules;
        Rule tempRule;
    try {
         rules = new Rules();
      jj_consume_token(RULES);
      jj_consume_token(OBR);
      label_18:
      while (true) {
        tempRule = RulesDefined();
                                           rules.addRule(tempRule);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_18;
        }
      }
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return rules;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//***********************************************END*****************************************************

//***********************************************GLOBAL**************************************************

//GLOBAL
  final public Global GlobalMain() throws ParseException {
                     /*@bgen(jjtree) GlobalMain */
        SimpleNode jjtn000 = new SimpleNode(JJTGLOBALMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Global global;
        Events events;
        Timers timers = null;
        States states;
        Actions actions;
        Rules rules;

        Conditions conditions;
    try {
         global = new Global();
      jj_consume_token(GLOBAL);
      jj_consume_token(OBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMERS:
        timers = TimersMain();
                                        global.setTimers(timers);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      states = StatesMain();
                                        global.setStates(states);
      events = EventsMain(timers);
                                             global.setEvents(events);
      conditions = ConditionsMain();
                                                global.setConditions(conditions);
      actions = ActionsMain();
                                         global.setActions(actions);
      rules = RulesMain();
                                     global.setRules(rules);
      jj_consume_token(CBR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return global;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//***********************************************END*****************************************************
//BackTracking... 
//SimpleNode Program():{}{
//	ImportsMain()
//	GlobalMain() 
//	<EOF>
//	{return jjtThis;}
//}
  final public Program Program() throws ParseException {
                   /*@bgen(jjtree) Program */
        SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Program p;
        Imports imp;
        Global global;
    try {
      imp = ImportsMain();
                p = new Program();
                p.setAllImports(imp);
      global = GlobalMain();
                               p.setGlobal(global);
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return p;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(STR)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(EVENTCAPTURE)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(OPAR)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ToolTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[48];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x800000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x1000,0x0,0x0,0x2000000,0x400,0x400,0x0,0x400000,0x400,0x0,0x400,0x0,0x2000000,0x1000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40000000,0x40000000,0x0,0x0,0x400,0x2,0x20000000,0x100000,0x20000000,0x4000,0x40,0x80,0x21000000,0x100000,0x21000000,0x4000,0x21000000,0x21800000,0x0,0x21800000,0x21800000,0x0,0x20000000,0x20800000,0x200000,0x400000,0x2000000,0x20000000,0x0,0x2000000,0x20000000,0x0,0x20000000,0x20000000,0x0,0x104000,0x114000,0x20000000,0x0,0x104000,0xe8000,0x1ec000,0x20000000,0x0,0x0,0x20000000,0x20000000,0x8,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Tool(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Tool(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ToolTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Tool(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ToolTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Tool(ToolTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ToolTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 48; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
