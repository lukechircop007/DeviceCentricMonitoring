/* Generated By:JJTree&JavaCC: Do not edit this line. ToolTokenManager.java */
package parser;
import java.io.FileInputStream;
import java.util.ArrayList;
import codeGeneration.CodeGenerationMain;
import states.*;

/** Token Manager. */
public class ToolTokenManager implements ToolConstants
{
        static boolean toReadEverything = false;
        static boolean actionsOrConditions = false;
        static boolean actionsOrConditionsBracket = false;
        static boolean actionsOrConditionsName = false;
        static int openBracketCount = 0;

        void CommonTokenAction(Token t){
                //System.out.println("Token: "+t.toString());
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10010000000000L) != 0L)
         {
            jjmatchedKind = 61;
            return 9;
         }
         if ((active0 & 0x16ffaffe0000010L) != 0L)
         {
            jjmatchedKind = 61;
            return 27;
         }
         if ((active0 & 0x800000L) != 0L)
            return 16;
         return -1;
      case 1:
         if ((active0 & 0x17ffbffe0000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
            return 27;
         }
         return -1;
      case 2:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1707bffe0000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
            return 27;
         }
         return -1;
      case 3:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1707bff80000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
            return 27;
         }
         if ((active0 & 0x60000000L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1507bfe00000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
            return 27;
         }
         if ((active0 & 0x20000180000000L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x5079c000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 5;
            }
            return 27;
         }
         if ((active0 & 0x100023e00000000L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x5078c000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active0 & 0x30000000000L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50780000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active0 & 0xc000000000L) != 0L)
            return 27;
         return -1;
      case 8:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50780000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50080000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
            return 27;
         }
         if ((active0 & 0x700000000000L) != 0L)
            return 27;
         return -1;
      case 10:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 10;
            return 27;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 27;
         return -1;
      case 11:
         if ((active0 & 0xf000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 11;
            return 27;
         }
         return -1;
      case 12:
         if ((active0 & 0xe000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 27;
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 12;
            return 27;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 13;
            return 27;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 38:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 42:
         return jjStopAtPos(0, 55);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 46:
         return jjStopAtPos(0, 18);
      case 47:
         return jjStartNfaWithStates_0(0, 23, 16);
      case 58:
         return jjStopAtPos(0, 15);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         return jjStopAtPos(0, 20);
      case 61:
         return jjStopAtPos(0, 19);
      case 62:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 64:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 13);
      case 92:
         return jjStopAtPos(0, 24);
      case 93:
         return jjStopAtPos(0, 14);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10010000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x220200000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000010L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100005080000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x840000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 10);
      case 124:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 37:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 38:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0xf800000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x480000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000040000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40800000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x108000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a0000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa3_0(active0, 0xf800000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20002000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x120000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000400000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10020280000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x108000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4980000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x10080000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40402000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20200000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xfa01000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x280400000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x401000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1f900000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x20a00000000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0xf800000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x210000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 27);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 27);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 27);
         break;
      case 116:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x120000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10080000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0xf800000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 27);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000c000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 27);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0xe800000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10080000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0xc000000000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10080000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1100000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 46, 27);
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 27);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x10080000000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(10, 47);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 43, 27);
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(11, 48);
         break;
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(12, 49);
         break;
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 54, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(12, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(13, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 52, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 16:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 47)
                     jjCheckNAddStates(2, 4);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(11);
                  break;
               case 15:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 18:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 19:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 20:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 42)
                     jjAddStates(5, 6);
                  break;
               case 24:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               case 25:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               case 26:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 27:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 0:
                  if (curChar == 101 && kind > 57)
                     kind = 57;
                  break;
               case 1:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 114 && kind > 57)
                     kind = 57;
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 17:
                  jjAddStates(2, 4);
                  break;
               case 22:
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  jjCheckNAddTwoStates(25, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 4);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 62);
      case 125:
         return jjStopAtPos(0, 63);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10010000000000L) != 0L)
         {
            jjmatchedKind = 61;
            return 9;
         }
         if ((active0 & 0x16ffaffe0000010L) != 0L)
         {
            jjmatchedKind = 61;
            return 27;
         }
         if ((active0 & 0x800000L) != 0L)
            return 16;
         return -1;
      case 1:
         if ((active0 & 0x17ffbffe0000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
            return 27;
         }
         return -1;
      case 2:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1707bffe0000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
            return 27;
         }
         return -1;
      case 3:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1707bff80000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
            return 27;
         }
         if ((active0 & 0x60000000L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1507bfe00000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
            return 27;
         }
         if ((active0 & 0x20000180000000L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x5079c000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 5;
            }
            return 27;
         }
         if ((active0 & 0x100023e00000000L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x5078c000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active0 & 0x30000000000L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50780000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active0 & 0xc000000000L) != 0L)
            return 27;
         return -1;
      case 8:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50780000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50080000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 9;
            return 27;
         }
         if ((active0 & 0x700000000000L) != 0L)
            return 27;
         return -1;
      case 10:
         if ((active0 & 0xf800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 10;
            return 27;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 27;
         return -1;
      case 11:
         if ((active0 & 0xf000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x50000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 11;
            return 27;
         }
         return -1;
      case 12:
         if ((active0 & 0xe000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 27;
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 12;
            return 27;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 61;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 13;
            return 27;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x40000000000L, 0x0L);
      case 38:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_1(0x2000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 42:
         return jjStopAtPos(0, 55);
      case 44:
         return jjStopAtPos(0, 17);
      case 46:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2L);
      case 47:
         return jjStartNfaWithStates_1(0, 23, 16);
      case 58:
         return jjStopAtPos(0, 15);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         return jjStopAtPos(0, 20);
      case 61:
         return jjStopAtPos(0, 19);
      case 62:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_1(0x400000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 12);
      case 82:
         return jjMoveStringLiteralDfa1_1(0xf800000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 13);
      case 92:
         return jjStopAtPos(0, 24);
      case 93:
         return jjStopAtPos(0, 14);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x10010000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x100000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x80000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x2000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x400000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x220200000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x8000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x20000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x100000010L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x100005080000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x840000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x20000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 10);
      case 124:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_1(0x8000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_1(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 38:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 86:
         return jjMoveStringLiteralDfa2_1(active0, 0xf800000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x480000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         return jjMoveStringLiteralDfa2_1(active0, 0x20000040000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x40800000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x20200000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x108000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x50000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x100001000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x1a0000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa3_1(active0, 0xf800000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x9000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x20002000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x120000000L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x140000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000400000000L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x10020280000000L);
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x100400000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_1(active0, 0x108000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_1(active0, 0x4980000000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(3, 29, 27);
         return jjMoveStringLiteralDfa4_1(active0, 0x10080000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x40402000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x20200000000L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000000000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(3, 30, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0xfa01000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000000000L);
      case 87:
         return jjMoveStringLiteralDfa5_1(active0, 0xc000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x280400000000L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000000000000L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 53, 27);
         return jjMoveStringLiteralDfa5_1(active0, 0x401000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x1f900000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(4, 31, 27);
         return jjMoveStringLiteralDfa5_1(active0, 0x20a00000000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(4, 32, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0xc000000000L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(5, 34, 27);
         return jjMoveStringLiteralDfa6_1(active0, 0x400000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0xf800000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_1(active0, 0x210000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x80000000000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(5, 35, 27);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 36, 27);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 37, 27);
         break;
      case 116:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 56, 27);
         return jjMoveStringLiteralDfa6_1(active0, 0x120000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa7_1(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x10080000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_1(active0, 0xf800000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 40, 27);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 41, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000c000000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa8_1(active0, 0x1000000000000L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 42);
         return jjMoveStringLiteralDfa8_1(active0, 0x200000000000L);
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 38, 27);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 39, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_1(active0, 0xe800000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_1(active0, 0x10080000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_1(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa9_1(active0, 0x800000000000L);
      case 80:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000000000000L);
      case 82:
         return jjMoveStringLiteralDfa9_1(active0, 0xc000000000000L);
      case 100:
         return jjMoveStringLiteralDfa9_1(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x10080000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x1100000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_1(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0x2000000000000L);
      case 100:
         return jjMoveStringLiteralDfa10_1(active0, 0x1000000000000L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 46, 27);
         return jjMoveStringLiteralDfa10_1(active0, 0xc000000000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 45, 27);
         return jjMoveStringLiteralDfa10_1(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_1(active0, 0x40000000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0x10080000000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 44, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_1(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x1000000000000L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(10, 47);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_1(active0, 0x40000000000000L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(10, 43, 27);
         return jjMoveStringLiteralDfa11_1(active0, 0x10000000000000L);
      case 115:
         return jjMoveStringLiteralDfa11_1(active0, 0xc000000000000L);
      case 117:
         return jjMoveStringLiteralDfa11_1(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa12_1(active0, 0x10000000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_1(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_1(active0, 0x40000000000000L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(11, 48);
         break;
      case 115:
         return jjMoveStringLiteralDfa12_1(active0, 0x2000000000000L);
      case 117:
         return jjMoveStringLiteralDfa12_1(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(12, 49);
         break;
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(12, 54, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_1(active0, 0x10000000000000L);
      case 109:
         return jjMoveStringLiteralDfa13_1(active0, 0x4000000000000L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(12, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_1(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_1(active0, 0x10000000000000L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(13, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_1(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(14, 52, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_1(13, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 16:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 47)
                     jjCheckNAddStates(2, 4);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(11);
                  break;
               case 15:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 18:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 19:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 20:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 42)
                     jjAddStates(5, 6);
                  break;
               case 24:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               case 25:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               case 26:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(13, 14);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 27:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 0:
                  if (curChar == 101 && kind > 57)
                     kind = 57;
                  break;
               case 1:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 114 && kind > 57)
                     kind = 57;
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 17:
                  jjAddStates(2, 4);
                  break;
               case 22:
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  jjCheckNAddTwoStates(25, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 4);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   16, 21, 17, 18, 20, 24, 26, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\100", "\133", "\135", "\72", "\73", "\54", "\56", "\75", "\74", "\76", "\76\76", 
"\57", "\134", "\46\46", "\46", "\174\174", "\174", "\156\165\154\154", 
"\164\150\151\163", "\163\165\160\145\162", "\162\165\154\145\163", "\151\155\160\157\162\164", 
"\147\154\157\142\141\154", "\164\151\155\145\162\163", "\163\164\141\164\145\163", 
"\145\166\145\156\164\163", "\163\141\166\145\127\151\164\150", "\154\157\141\144\127\151\164\150", 
"\141\143\164\151\157\156\163", "\151\155\160\157\162\164\163", "\43\151\156\143\154\165\144\145", 
"\144\145\143\154\141\162\141\164\151\157\156", "\143\157\156\144\151\164\151\157\156\163", 
"\151\156\163\164\141\156\143\145\157\146", "\153\145\162\156\145\154\123\151\144\145", 
"\122\126\72\164\151\155\145\162\117\146\146", "\122\126\72\164\151\155\145\125\156\144\145\162", 
"\122\126\72\164\151\155\145\162\120\141\165\163\145", "\122\126\72\164\151\155\145\162\122\145\163\165\155\145", 
"\122\126\72\164\151\155\145\162\122\145\163\145\164", "\141\160\160\154\151\143\141\164\151\157\156\123\151\144\145", 
"\167\150\145\162\145", "\165\160\157\156\122\145\164\165\162\156\151\156\147", "\52", 
"\163\164\162\165\143\164", null, null, null, null, null, "\173", "\175", null, "\56\150", "\100\45", 
"\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IMPORTSS",
   "BLOCK",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xebffffffffffff01L, 0xfL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[27];
private final int[] jjstateSet = new int[54];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ToolTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ToolTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 27; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 64)
       {
          jjmatchedKind = 64;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                           if(toReadEverything || actionsOrConditionsBracket) SwitchTo(BLOCK);
                                                if(!toReadEverything && actionsOrConditions && actionsOrConditionsName ){
                                                        actionsOrConditionsBracket = true;
                                                }
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                                actionsOrConditionsBracket = false;
                                                actionsOrConditionsName = false;
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                           SwitchTo(DEFAULT);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                             if(actionsOrConditions) toReadEverything = true;
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                           if(actionsOrConditions) toReadEverything = true;
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                                      toReadEverything = true;
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                                      toReadEverything = true;
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                                    actionsOrConditions = true;
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                                      SwitchTo(IMPORTSS);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                                         toReadEverything = true;
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                                        actionsOrConditions = true;
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                                        if(actionsOrConditions) toReadEverything = true;
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                                             if (actionsOrConditions) toReadEverything = true;
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                                      toReadEverything = true;
         break;
      case 61 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                 if(actionsOrConditions)actionsOrConditionsName = true;
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                         openBracketCount++;
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                           if(openBracketCount == 0) {
                                                SwitchTo(DEFAULT);
                                                toReadEverything = false;
                                                actionsOrConditionsBracket = false;
                                                actionsOrConditionsName = false;
                                         } else openBracketCount--;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
