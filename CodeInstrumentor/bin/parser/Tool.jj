/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Tool.jj */
/*@egen*/options{
  FORCE_LA_CHECK = true;
  COMMON_TOKEN_ACTION = true;
  static = false;
}

PARSER_BEGIN(Tool)
package parser;
import java.io.FileInputStream;
import Instrumentor.InstrumentorMain;
import states.*;

public class Tool/*@bgen(jjtree)*/implements ToolTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTToolState jjtree = new JJTToolState();

/*@egen*/
	
	public static void main( String[] args ){
		try{	
			System.setIn(new FileInputStream(args[0]));
			Tool parser = new Tool( System.in );	
			//Program n = parser.Program();
			//n.dump("");
			ClassRepresentation n = parser.Program();
            System.out.println("Lesta ha jibda Code generation..");
            InstrumentorMain inst = new InstrumentorMain();
            inst.startInstrumentation(n);
		}catch(Exception e){
			System.out.println("Problema: "+e);			
		}
	}
}

PARSER_END(Tool)

<DEFAULT> SKIP:{
	 " " 
	| "\n"
	| "\r"
	| "r\n"
	| "\t"
	| < "//" (~[ "\n", "\r" ])
			*("\n" | "\r" | "\r\n") >
	| < "/*" (~[ "*" ])*
			"*"(~[ "/" ] (~[ "*" ])*
			"*")*"/" >
}

<DEFAULT> TOKEN:{
	  <OBR: "(">
	| <CBR : ")">
	| <COMMA: "," >
	| <STAR: "*" >
	| <CALL : "@before" | "@after">
	| <CLASS: "@Class:"> 
	| <INSTANCE: "@Instance:" > 
	| <EVENT: "@Event:" > 
	| <STRCODE: "@Code:" > :CODEREADING
}

<DEFAULT> TOKEN:{
	 < #DIGIT   : ["0" - "9"] >
	|< INTEGER  : (< DIGIT >)+ >	
	|< #LETTER  : ["a"-"z"] | ["A"-"Z"] >
	|< STRING   : <LETTER> ( <LETTER> | <INTEGER> | "_")* > 
}

<CODEREADING> TOKEN: {	
	<ENDCODE: "@EndCode" > : DEFAULT
	| <CODE: ~[] >
}

TOKEN_MGR_DECLS:{
	
	void CommonTokenAction(Token t){
		//System.out.println("Token: "+t.toString());
	}
}
//****************************************FIN************************************************************

String Class():{/*@bgen(jjtree) Class */
        SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}{/*@bgen(jjtree) Class */
        try {
/*@egen*/
	<CLASS> t = <STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return t.toString();}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Instance():{/*@bgen(jjtree) Instance */
        SimpleNode jjtn000 = new SimpleNode(JJTINSTANCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}{/*@bgen(jjtree) Instance */
        try {
/*@egen*/
	<INSTANCE> (t = <STAR> | t = <STRING>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return t.toString();}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Type():{/*@bgen(jjtree) Type */
        SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	t= <STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return t.toString();}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Parameters Parameters():{/*@bgen(jjtree) Parameters */
        SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String tt;
	Token t;
	Parameters parameter;
}{/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	{parameter = new Parameters();}
	(
	 ( 
	  (tt = Type(){parameter.addParameterType(tt);} 
	   t = <STRING>{parameter.addParameterName(t.toString());} 
	  )| 
	  t = <STAR> {parameter.setStar();} 
	 ) 
	 (<COMMA>
	  (
	   (tt = Type(){parameter.addParameterType(tt);}
	    t = <STRING>{parameter.addParameterName(t.toString());}
	   )| 
	  t = <STAR> {parameter.setStar();}  
	  ) 
	 )*
	)?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return parameter;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Event(InstrumentationEvent instEvent):{/*@bgen(jjtree) Event */
        SimpleNode jjtn000 = new SimpleNode(JJTEVENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	Parameters param;
}{/*@bgen(jjtree) Event */
        try {
/*@egen*/
	<EVENT> 
	t = <STRING>{instEvent.setEventName(t.toString());} 
	<OBR> 
		param = Parameters(){instEvent.setEventParameters(param);} 
	<CBR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Code():{/*@bgen(jjtree) Code */
        SimpleNode jjtn000 = new SimpleNode(JJTCODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	String code = "";
}{/*@bgen(jjtree) Code */
        try {
/*@egen*/
	<STRCODE>
		(t = <CODE>{code += t.toString();})*
	<ENDCODE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return code;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Start(ClassRepresentation clsRep):{/*@bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	String className;
	String temp;
	InstrumentationEvent instEvent;
}{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	(
		{instEvent = new InstrumentationEvent();}
		t = <CALL> {instEvent.setPointOfInstrumentation(t.toString());}
		className = Class()
		temp = Instance(){instEvent.setEventInstance(temp);}
		Event(instEvent)
		temp = Code(){instEvent.setCodeToBeInstrumented(temp);}
		{clsRep.addInstrumentation(className,instEvent);}
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


ClassRepresentation Program():{/*@bgen(jjtree) Program */
        SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ClassRepresentation clsRep;
}{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	{clsRep = new ClassRepresentation();}
	Start(clsRep)
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return clsRep;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
